//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GEE.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GEEDbContext : DbContext
    {
        public GEEDbContext()
            : base("name=GEEDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AcademicYear> AcademicYears { get; set; }
        public virtual DbSet<AdmissionDetail> AdmissionDetails { get; set; }
        public virtual DbSet<AdmissionStatu> AdmissionStatus { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AssessmentStructureAssessmentTypeMapping> AssessmentStructureAssessmentTypeMappings { get; set; }
        public virtual DbSet<AssessmentTYPE> AssessmentTYPEs { get; set; }
        public virtual DbSet<BatchClassTeacherMonitorMapping> BatchClassTeacherMonitorMappings { get; set; }
        public virtual DbSet<BatchMaster> BatchMasters { get; set; }
        public virtual DbSet<BatchStudentMapping> BatchStudentMappings { get; set; }
        public virtual DbSet<BookCourseMapping> BookCourseMappings { get; set; }
        public virtual DbSet<BookMaster> BookMasters { get; set; }
        public virtual DbSet<CandidateDetail> CandidateDetails { get; set; }
        public virtual DbSet<ClassMaster> ClassMasters { get; set; }
        public virtual DbSet<CommunicationTemplate> CommunicationTemplates { get; set; }
        public virtual DbSet<CourseBatchMapping> CourseBatchMappings { get; set; }
        public virtual DbSet<CourseMaster> CourseMasters { get; set; }
        public virtual DbSet<Doccategory_IDmapping> Doccategory_IDmapping { get; set; }
        public virtual DbSet<DocumentAuditlog> DocumentAuditlogs { get; set; }
        public virtual DbSet<DocumentdownloadHistory> DocumentdownloadHistories { get; set; }
        public virtual DbSet<DocumentPermission> DocumentPermissions { get; set; }
        public virtual DbSet<DocumentSubmissionDetail> DocumentSubmissionDetails { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<EducationDetail> EducationDetails { get; set; }
        public virtual DbSet<EmailLog> EmailLogs { get; set; }
        public virtual DbSet<EmployeeEducationDetail> EmployeeEducationDetails { get; set; }
        public virtual DbSet<EmployeeExperience> EmployeeExperiences { get; set; }
        public virtual DbSet<EmployeeIDdetail> EmployeeIDdetails { get; set; }
        public virtual DbSet<EmployeeMaster> EmployeeMasters { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<GradeDetail> GradeDetails { get; set; }
        public virtual DbSet<GroupMaster> GroupMasters { get; set; }
        public virtual DbSet<HouseDesignationMemersMapping> HouseDesignationMemersMappings { get; set; }
        public virtual DbSet<HouseMembersMapping> HouseMembersMappings { get; set; }
        public virtual DbSet<IndexScreenDetail> IndexScreenDetails { get; set; }
        public virtual DbSet<LoginTrack> LoginTracks { get; set; }
        public virtual DbSet<MailMerge> MailMerges { get; set; }
        public virtual DbSet<MasterTable> MasterTables { get; set; }
        public virtual DbSet<MasterTabletype> MasterTabletypes { get; set; }
        public virtual DbSet<NavigationMenu> NavigationMenus { get; set; }
        public virtual DbSet<NavigationMenu1> NavigationMenu1 { get; set; }
        public virtual DbSet<NavigationType> NavigationTypes { get; set; }
        public virtual DbSet<Navmenu_asprole_permisison_mapping> Navmenu_asprole_permisison_mapping { get; set; }
        public virtual DbSet<Navmenu_asprole_permisison_UserGroup_mapping> Navmenu_asprole_permisison_UserGroup_mapping { get; set; }
        public virtual DbSet<NumberGenScheme> NumberGenSchemes { get; set; }
        public virtual DbSet<Registration> Registrations { get; set; }
        public virtual DbSet<RoomMaster> RoomMasters { get; set; }
        public virtual DbSet<Route_Vech_Driver_Mapping> Route_Vech_Driver_Mapping { get; set; }
        public virtual DbSet<RouteDetail> RouteDetails { get; set; }
        public virtual DbSet<RouteMaster> RouteMasters { get; set; }
        public virtual DbSet<SchoolConfig> SchoolConfigs { get; set; }
        public virtual DbSet<SchoolMaster> SchoolMasters { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMasters { get; set; }
        public virtual DbSet<SMSLog> SMSLogs { get; set; }
        public virtual DbSet<StopMaster> StopMasters { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<SubjectMaster> SubjectMasters { get; set; }
        public virtual DbSet<SubjectTypeMaster> SubjectTypeMasters { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TeacherCourseMapping> TeacherCourseMappings { get; set; }
        public virtual DbSet<TransportAllocation> TransportAllocations { get; set; }
        public virtual DbSet<TransportFee> TransportFees { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserGroupAspUserMapping> UserGroupAspUserMappings { get; set; }
        public virtual DbSet<UserGroupNavigationMenuMapping> UserGroupNavigationMenuMappings { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<VechicleMaster> VechicleMasters { get; set; }
        public virtual DbSet<VechicleStaffMapping> VechicleStaffMappings { get; set; }
        public virtual DbSet<AspNetUserRolesHistory> AspNetUserRolesHistories { get; set; }
    
        public virtual ObjectResult<FillCombo_Result> FillCombo(string tbName, string fname, string code, string cond)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("TbName", tbName) :
                new ObjectParameter("TbName", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var condParameter = cond != null ?
                new ObjectParameter("cond", cond) :
                new ObjectParameter("cond", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillCombo_Result>("FillCombo", tbNameParameter, fnameParameter, codeParameter, condParameter);
        }
    
        public virtual ObjectResult<FillComboAdv_Result> FillComboAdv(string tbName)
        {
            var tbNameParameter = tbName != null ?
                new ObjectParameter("TbName", tbName) :
                new ObjectParameter("TbName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillComboAdv_Result>("FillComboAdv", tbNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<GetDetails_Result> GetDetails(string enquiryNo)
        {
            var enquiryNoParameter = enquiryNo != null ?
                new ObjectParameter("EnquiryNo", enquiryNo) :
                new ObjectParameter("EnquiryNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetails_Result>("GetDetails", enquiryNoParameter);
        }
    
        public virtual ObjectResult<GetMaster_Result> GetMaster(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMaster_Result>("GetMaster", tableNameParameter);
        }
    
        public virtual ObjectResult<GetMasterDropDown_Result> GetMasterDropDown(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterDropDown_Result>("GetMasterDropDown", tableNameParameter);
        }
    
        public virtual ObjectResult<GetMasterForDropDown_Result> GetMasterForDropDown(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterForDropDown_Result>("GetMasterForDropDown", tableNameParameter);
        }
    
        public virtual ObjectResult<GetMasterOfAll_Result> GetMasterOfAll(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterOfAll_Result>("GetMasterOfAll", tableNameParameter);
        }
    
        public virtual ObjectResult<GetReligion_Result> GetReligion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReligion_Result>("GetReligion");
        }
    
        public virtual ObjectResult<GetMenu_Result> GetMenu(string userName, Nullable<byte> action)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenu_Result>("GetMenu", userNameParameter, actionParameter);
        }
    
        public virtual int ChangeUserGroupPermission(string userName, Nullable<int> newCUserId, Nullable<int> newUserGroup_ID, Nullable<byte> action)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newCUserIdParameter = newCUserId.HasValue ?
                new ObjectParameter("NewCUserId", newCUserId) :
                new ObjectParameter("NewCUserId", typeof(int));
    
            var newUserGroup_IDParameter = newUserGroup_ID.HasValue ?
                new ObjectParameter("NewUserGroup_ID", newUserGroup_ID) :
                new ObjectParameter("NewUserGroup_ID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeUserGroupPermission", userNameParameter, newCUserIdParameter, newUserGroup_IDParameter, actionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckIsDefault(Nullable<int> schoolId, Nullable<int> groupId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckIsDefault", schoolIdParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<CheckMenuPermissionForModule_Result> CheckMenuPermissionForModule(Nullable<int> userGroupID, Nullable<int> navigationId)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var navigationIdParameter = navigationId.HasValue ?
                new ObjectParameter("NavigationId", navigationId) :
                new ObjectParameter("NavigationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckMenuPermissionForModule_Result>("CheckMenuPermissionForModule", userGroupIDParameter, navigationIdParameter);
        }
    
        public virtual int CopyGroupRights(Nullable<int> originalGroupID, Nullable<int> newGroupID)
        {
            var originalGroupIDParameter = originalGroupID.HasValue ?
                new ObjectParameter("OriginalGroupID", originalGroupID) :
                new ObjectParameter("OriginalGroupID", typeof(int));
    
            var newGroupIDParameter = newGroupID.HasValue ?
                new ObjectParameter("NewGroupID", newGroupID) :
                new ObjectParameter("NewGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyGroupRights", originalGroupIDParameter, newGroupIDParameter);
        }
    
        public virtual int GetCandidateDetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> schoolId, Nullable<int> groupId)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCandidateDetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, schoolIdParameter, groupIdParameter);
        }
    
        public virtual int GetEmployeeDetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployeeDetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int GetEnquiryDetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEnquiryDetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<GetMasterTableRecord_Result> GetMasterTableRecord(Nullable<int> masterTableId, Nullable<int> masterTypeId, Nullable<int> schoolId, Nullable<int> groupId, Nullable<int> sessionYear, Nullable<bool> isDeleted)
        {
            var masterTableIdParameter = masterTableId.HasValue ?
                new ObjectParameter("MasterTableId", masterTableId) :
                new ObjectParameter("MasterTableId", typeof(int));
    
            var masterTypeIdParameter = masterTypeId.HasValue ?
                new ObjectParameter("MasterTypeId", masterTypeId) :
                new ObjectParameter("MasterTypeId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var sessionYearParameter = sessionYear.HasValue ?
                new ObjectParameter("SessionYear", sessionYear) :
                new ObjectParameter("SessionYear", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterTableRecord_Result>("GetMasterTableRecord", masterTableIdParameter, masterTypeIdParameter, schoolIdParameter, groupIdParameter, sessionYearParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<GetMenuadv_Result> GetMenuadv(string userName, Nullable<byte> action)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMenuadv_Result>("GetMenuadv", userNameParameter, actionParameter);
        }
    
        public virtual ObjectResult<GetNavigationPermission_Result> GetNavigationPermission(Nullable<int> userGroupID, Nullable<int> navigationId)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var navigationIdParameter = navigationId.HasValue ?
                new ObjectParameter("NavigationId", navigationId) :
                new ObjectParameter("NavigationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNavigationPermission_Result>("GetNavigationPermission", userGroupIDParameter, navigationIdParameter);
        }
    
        public virtual int GetRuteMasterdetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> schoolId, Nullable<int> groupId)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRuteMasterdetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, schoolIdParameter, groupIdParameter);
        }
    
        public virtual int GetSellAndSubmitDetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> schoolId, Nullable<int> groupId)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSellAndSubmitDetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, schoolIdParameter, groupIdParameter);
        }
    
        public virtual int GetStartAdmissiondetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder, Nullable<int> schoolId, Nullable<int> groupId)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStartAdmissiondetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter, schoolIdParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<GetStateCountyByCity_Result> GetStateCountyByCity(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStateCountyByCity_Result>("GetStateCountyByCity", cityIdParameter);
        }
    
        public virtual int GetUserDetails(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserDetails", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertEmployeeDetails(string employeeDetailsXML, string educationItemXML, string experinceItemXML, string employeeIdItemXML, Nullable<int> modifiedBy, Nullable<int> employeeMasterID)
        {
            var employeeDetailsXMLParameter = employeeDetailsXML != null ?
                new ObjectParameter("EmployeeDetailsXML", employeeDetailsXML) :
                new ObjectParameter("EmployeeDetailsXML", typeof(string));
    
            var educationItemXMLParameter = educationItemXML != null ?
                new ObjectParameter("EducationItemXML", educationItemXML) :
                new ObjectParameter("EducationItemXML", typeof(string));
    
            var experinceItemXMLParameter = experinceItemXML != null ?
                new ObjectParameter("ExperinceItemXML", experinceItemXML) :
                new ObjectParameter("ExperinceItemXML", typeof(string));
    
            var employeeIdItemXMLParameter = employeeIdItemXML != null ?
                new ObjectParameter("EmployeeIdItemXML", employeeIdItemXML) :
                new ObjectParameter("EmployeeIdItemXML", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var employeeMasterIDParameter = employeeMasterID.HasValue ?
                new ObjectParameter("EmployeeMasterID", employeeMasterID) :
                new ObjectParameter("EmployeeMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertEmployeeDetails", employeeDetailsXMLParameter, educationItemXMLParameter, experinceItemXMLParameter, employeeIdItemXMLParameter, modifiedByParameter, employeeMasterIDParameter);
        }
    
        public virtual int InsertRole(string roleName, string navigationMenuCode, string navigationMenuName, Nullable<int> navigationTypeId, Nullable<int> navigationMenuParentId, string menuURL, Nullable<bool> naviVisible, string iconClass, string resxKey, string iPAddress, string mACAddress, string permissionName, Nullable<int> menuGroupId, Nullable<int> sessionyear, Nullable<int> createdBy_ID, Nullable<int> modifiedBy_ID, Nullable<int> schoolID, Nullable<int> groupID, Nullable<int> sequence, Nullable<byte> action)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var navigationMenuCodeParameter = navigationMenuCode != null ?
                new ObjectParameter("NavigationMenuCode", navigationMenuCode) :
                new ObjectParameter("NavigationMenuCode", typeof(string));
    
            var navigationMenuNameParameter = navigationMenuName != null ?
                new ObjectParameter("NavigationMenuName", navigationMenuName) :
                new ObjectParameter("NavigationMenuName", typeof(string));
    
            var navigationTypeIdParameter = navigationTypeId.HasValue ?
                new ObjectParameter("NavigationTypeId", navigationTypeId) :
                new ObjectParameter("NavigationTypeId", typeof(int));
    
            var navigationMenuParentIdParameter = navigationMenuParentId.HasValue ?
                new ObjectParameter("NavigationMenuParentId", navigationMenuParentId) :
                new ObjectParameter("NavigationMenuParentId", typeof(int));
    
            var menuURLParameter = menuURL != null ?
                new ObjectParameter("MenuURL", menuURL) :
                new ObjectParameter("MenuURL", typeof(string));
    
            var naviVisibleParameter = naviVisible.HasValue ?
                new ObjectParameter("NaviVisible", naviVisible) :
                new ObjectParameter("NaviVisible", typeof(bool));
    
            var iconClassParameter = iconClass != null ?
                new ObjectParameter("IconClass", iconClass) :
                new ObjectParameter("IconClass", typeof(string));
    
            var resxKeyParameter = resxKey != null ?
                new ObjectParameter("ResxKey", resxKey) :
                new ObjectParameter("ResxKey", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var mACAddressParameter = mACAddress != null ?
                new ObjectParameter("MACAddress", mACAddress) :
                new ObjectParameter("MACAddress", typeof(string));
    
            var permissionNameParameter = permissionName != null ?
                new ObjectParameter("PermissionName", permissionName) :
                new ObjectParameter("PermissionName", typeof(string));
    
            var menuGroupIdParameter = menuGroupId.HasValue ?
                new ObjectParameter("MenuGroupId", menuGroupId) :
                new ObjectParameter("MenuGroupId", typeof(int));
    
            var sessionyearParameter = sessionyear.HasValue ?
                new ObjectParameter("Sessionyear", sessionyear) :
                new ObjectParameter("Sessionyear", typeof(int));
    
            var createdBy_IDParameter = createdBy_ID.HasValue ?
                new ObjectParameter("CreatedBy_ID", createdBy_ID) :
                new ObjectParameter("CreatedBy_ID", typeof(int));
    
            var modifiedBy_IDParameter = modifiedBy_ID.HasValue ?
                new ObjectParameter("ModifiedBy_ID", modifiedBy_ID) :
                new ObjectParameter("ModifiedBy_ID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRole", roleNameParameter, navigationMenuCodeParameter, navigationMenuNameParameter, navigationTypeIdParameter, navigationMenuParentIdParameter, menuURLParameter, naviVisibleParameter, iconClassParameter, resxKeyParameter, iPAddressParameter, mACAddressParameter, permissionNameParameter, menuGroupIdParameter, sessionyearParameter, createdBy_IDParameter, modifiedBy_IDParameter, schoolIDParameter, groupIDParameter, sequenceParameter, actionParameter);
        }
    
        public virtual int InsertRole_New(string roleName, Nullable<int> sessionyear, Nullable<int> createdBy_ID, Nullable<int> modifiedBy_ID, Nullable<int> schoolID, Nullable<int> groupID, Nullable<byte> action)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var sessionyearParameter = sessionyear.HasValue ?
                new ObjectParameter("Sessionyear", sessionyear) :
                new ObjectParameter("Sessionyear", typeof(int));
    
            var createdBy_IDParameter = createdBy_ID.HasValue ?
                new ObjectParameter("CreatedBy_ID", createdBy_ID) :
                new ObjectParameter("CreatedBy_ID", typeof(int));
    
            var modifiedBy_IDParameter = modifiedBy_ID.HasValue ?
                new ObjectParameter("ModifiedBy_ID", modifiedBy_ID) :
                new ObjectParameter("ModifiedBy_ID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRole_New", roleNameParameter, sessionyearParameter, createdBy_IDParameter, modifiedBy_IDParameter, schoolIDParameter, groupIDParameter, actionParameter);
        }
    
        public virtual ObjectResult<MenuPermission_Result> MenuPermission(Nullable<int> userGroupID, Nullable<int> navigationId)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var navigationIdParameter = navigationId.HasValue ?
                new ObjectParameter("NavigationId", navigationId) :
                new ObjectParameter("NavigationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MenuPermission_Result>("MenuPermission", userGroupIDParameter, navigationIdParameter);
        }
    
        public virtual ObjectResult<RoleMappingToAspNetUserRole_Result> RoleMappingToAspNetUserRole(Nullable<int> userID, Nullable<byte> action)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleMappingToAspNetUserRole_Result>("RoleMappingToAspNetUserRole", userIDParameter, actionParameter);
        }
    
        public virtual ObjectResult<RoleMappingToAspNetUserRoleToDEl_Result> RoleMappingToAspNetUserRoleToDEl(string userName, Nullable<byte> action)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleMappingToAspNetUserRoleToDEl_Result>("RoleMappingToAspNetUserRoleToDEl", userNameParameter, actionParameter);
        }
    
        public virtual int SampleFilterSP(string selectColumn, string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var selectColumnParameter = selectColumn != null ?
                new ObjectParameter("SelectColumn", selectColumn) :
                new ObjectParameter("SelectColumn", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SampleFilterSP", selectColumnParameter, searchValueParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int SampleFilterSP_New()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SampleFilterSP_New");
        }
    
        public virtual int UpdateMasterTable(Nullable<int> schoolId, Nullable<int> groupId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMasterTable", schoolIdParameter, groupIdParameter);
        }
    
        public virtual int usp_Permission_seq1(string vUserName, string roleName, Nullable<byte> action)
        {
            var vUserNameParameter = vUserName != null ?
                new ObjectParameter("VUserName", vUserName) :
                new ObjectParameter("VUserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Permission_seq1", vUserNameParameter, roleNameParameter, actionParameter);
        }
    
        public virtual int usp_Permission_seq2(Nullable<int> roleId, Nullable<int> navigationMenu_Id, Nullable<int> permission_Id, Nullable<int> userGroup_ID, Nullable<byte> action)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var navigationMenu_IdParameter = navigationMenu_Id.HasValue ?
                new ObjectParameter("NavigationMenu_Id", navigationMenu_Id) :
                new ObjectParameter("NavigationMenu_Id", typeof(int));
    
            var permission_IdParameter = permission_Id.HasValue ?
                new ObjectParameter("Permission_Id", permission_Id) :
                new ObjectParameter("Permission_Id", typeof(int));
    
            var userGroup_IDParameter = userGroup_ID.HasValue ?
                new ObjectParameter("UserGroup_ID", userGroup_ID) :
                new ObjectParameter("UserGroup_ID", typeof(int));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Permission_seq2", roleIdParameter, navigationMenu_IdParameter, permission_IdParameter, userGroup_IDParameter, actionParameter);
        }
    }
}
